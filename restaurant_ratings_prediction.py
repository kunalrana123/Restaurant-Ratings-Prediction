# -*- coding: utf-8 -*-
"""Restaurant Ratings Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-rvcE1a9FRrVekhfWJSQowc9-jjNQ3yh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dataset_df = pd.read_csv('/content/Dataset .csv')

dataset_df

dataset_df.head()

dataset_df.tail()

dataset_df.shape

dataset_df.isnull().sum()

dataset_df.shape

dataset_df.info()

dataset_df.describe()

dataset_df = dataset_df.dropna(how = 'any')

dataset_df['Price range'].value_counts().plot(kind='pie', autopct = '%.2f')

dataset_df['Aggregate rating'].value_counts().plot(kind='pie', autopct = '%.2f')

sns.distplot(dataset_df['Aggregate rating'])

sns.distplot(dataset_df['Price range'])

sns.barplot(x=dataset_df["Rating text"],y=dataset_df["Votes"],hue =dataset_df["Rating color"])

sns.scatterplot(data = dataset_df, x=dataset_df["Aggregate rating"],y=dataset_df["Votes"],hue=dataset_df["Price range"])

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
dataset_df['Has Table booking'] = label_encoder.fit_transform(dataset_df['Has Table booking'])
dataset_df['Has Online delivery'] = label_encoder.fit_transform(dataset_df['Has Online delivery'])
dataset_df['Is delivering now'] = label_encoder.fit_transform(dataset_df['Is delivering now'])
dataset_df['Switch to order menu'] = label_encoder.fit_transform(dataset_df['Switch to order menu'])
dataset_df['Rating color'] = label_encoder.fit_transform(dataset_df['Rating color'])
dataset_df['Rating text'] = label_encoder.fit_transform(dataset_df['Rating text'])

dataset_df

dataset_df = dataset_df.drop('Restaurant ID', axis=1)
dataset_df = dataset_df.drop('Restaurant Name', axis=1)
dataset_df = dataset_df.drop('Country Code', axis=1)
dataset_df = dataset_df.drop('City', axis=1)
dataset_df = dataset_df.drop('Address', axis=1)
dataset_df = dataset_df.drop('Locality', axis=1)
dataset_df = dataset_df.drop('Locality Verbose', axis=1)
dataset_df = dataset_df.drop('Longitude', axis=1)
dataset_df = dataset_df.drop('Latitude', axis=1)
dataset_df = dataset_df.drop('Cuisines', axis=1)
dataset_df = dataset_df.drop('Currency', axis=1)

dataset_df

correlation_matrix = dataset_df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import r2_score

x = dataset_df.drop('Aggregate rating', axis=1)
y = dataset_df['Aggregate rating']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=353)
x_train.head()
y_train.head()

reg=LinearRegression()
reg.fit(x_train,y_train)
y_pred=reg.predict(x_test)
from sklearn.metrics import r2_score
r2_score(y_test,y_pred)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
reg = LinearRegression()
reg.fit(x_train, y_train)
y_pred = reg.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse:.2f}")
r2 = r2_score(y_test, y_pred)
print(f"R-squared (R2) Error: {r2:.2f}")

from sklearn.tree import DecisionTreeRegressor
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=105)
DTree=DecisionTreeRegressor(min_samples_leaf=.0001)
DTree.fit(x_train,y_train)
y_predict=DTree.predict(x_test)
from sklearn.metrics import r2_score
r2_score(y_test,y_predict)

from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

DTree = DecisionTreeRegressor(min_samples_leaf=0.0001)

DTree.fit(x_train, y_train)

y_predict = DTree.predict(x_test)


mse = mean_squared_error(y_test, y_predict)
print(f"Mean Squared Error (RMSE): {mse:.2f}")


r2 = r2_score(y_test, y_predict)
print(f"R-squared (R2) Error: {r2:.2f}")